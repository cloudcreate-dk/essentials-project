/*
 * Copyright 2021-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dk.trustworks.essentials.components.eventsourced.eventstore.postgresql.persistence;

import dk.trustworks.essentials.components.eventsourced.eventstore.postgresql.eventstream.AggregateType;
import dk.trustworks.essentials.components.eventsourced.eventstore.postgresql.persistence.table_per_aggregate_type.*;
import dk.trustworks.essentials.components.eventsourced.eventstore.postgresql.serializer.AggregateIdSerializer;
import dk.trustworks.essentials.components.foundation.postgresql.PostgresqlUtil;

/**
 * Helper Factory for creating {@link SeparateTablePerAggregateEventStreamConfiguration}
 * with a shared/common configuration that's compatible wth the chosen {@link AggregateEventStreamPersistenceStrategy}
 */
public interface AggregateEventStreamConfigurationFactory<CONFIG extends AggregateEventStreamConfiguration> {
    /**
     * Create concrete {@link AggregateEventStreamConfiguration} for a given {@link AggregateType} based on the base configuration of
     * this {@link AggregateEventStreamConfigurationFactory}
     *
     * @param aggregateType         the aggregate type for which we're creating an {@link AggregateEventStreamConfiguration}
     *                              <strong>Note:</strong><br>
     *                              The {@code aggregateType}'s value will be converted to a table name, or part of a table name, in {@link SeparateTablePerAggregateTypePersistenceStrategy},
     *                              and thereafter directly be used in constructing SQL statements through string concatenation, which exposes that component to SQL injection attacks.<br>
     *                              <br>
     *                              <strong>Security Note:</strong><br>
     *                              It is the responsibility of the user of this component to sanitize the {@code aggregateType}'s value
     *                              to ensure the security of all the SQL statements generated by this component. The {@link SeparateTablePerAggregateEventStreamConfiguration} component will
     *                              call the {@link PostgresqlUtil#checkIsValidTableOrColumnName(String)} method to validate the table name as a first line of defense.<br>
     *                              The {@link PostgresqlUtil#checkIsValidTableOrColumnName(String)} provides an initial layer of defense against SQL injection by applying naming conventions intended to reduce the risk of malicious input.<br>
     *                              However, Essentials components as well as {@link PostgresqlUtil#checkIsValidTableOrColumnName(String)} does not offer exhaustive protection, nor does it assure the complete security of the resulting SQL against SQL injection threats.<br>
     *                              <b>The responsibility for implementing protective measures against SQL Injection lies exclusively with the users/developers using the Essentials components and its supporting classes.</b><br>
     *                              Users must ensure thorough sanitization and validation of API input parameters,  column, table, and index names.<br>
     *                              Insufficient attention to these practices may leave the application vulnerable to SQL injection, potentially endangering the security and integrity of the database.<br>
     *
     *                              <br>
     *                              It is highly recommended that the {@code aggregateType}'s value is only derived from a controlled and trusted source.<br>
     *                              To mitigate the risk of SQL injection attacks, external or untrusted inputs should never directly provide the {@code aggregateType}'s value.<br>
     *                              <b>Failure to adequately sanitize and validate this value could expose the application to SQL injection
     * @param aggregateIdSerializer the {@link AggregateIdSerializer} to use for the given {@link AggregateType}
     * @return the concrete {@link AggregateEventStreamConfiguration} for a given {@link AggregateType}
     */
    CONFIG createEventStreamConfigurationFor(AggregateType aggregateType,
                                             AggregateIdSerializer aggregateIdSerializer);

    /**
     * Create concrete {@link AggregateEventStreamConfiguration} for a given {@link AggregateType} based on the base configuration of
     * this {@link AggregateEventStreamConfigurationFactory}
     *
     * @param aggregateType   the aggregate type for which we're creating an {@link AggregateEventStreamConfiguration}<br>
     *                        <strong>Note:</strong><br>
     *                        The {@code aggregateType}'s value will be converted to a table name, or part of a table name, in {@link SeparateTablePerAggregateTypePersistenceStrategy},
     *                        and thereafter directly be used in constructing SQL statements through string concatenation, which exposes that component to SQL injection attacks.<br>
     *                        <br>
     *                        <strong>Security Note:</strong><br>
     *                        It is the responsibility of the user of this component to sanitize the {@code aggregateType}'s value
     *                        to ensure the security of all the SQL statements generated by this component. The {@link SeparateTablePerAggregateEventStreamConfiguration} component will
     *                        call the {@link PostgresqlUtil#checkIsValidTableOrColumnName(String)} method to validate the table name as a first line of defense.<br>
     *                        The {@link PostgresqlUtil#checkIsValidTableOrColumnName(String)} provides an initial layer of defense against SQL injection by applying naming conventions intended to reduce the risk of malicious input.<br>
     *                        However, Essentials components as well as {@link PostgresqlUtil#checkIsValidTableOrColumnName(String)} does not offer exhaustive protection, nor does it assure the complete security of the resulting SQL against SQL injection threats.<br>
     *                        <b>The responsibility for implementing protective measures against SQL Injection lies exclusively with the users/developers using the Essentials components and its supporting classes.</b><br>
     *                        Users must ensure thorough sanitization and validation of API input parameters,  column, table, and index names.<br>
     *                        Insufficient attention to these practices may leave the application vulnerable to SQL injection, potentially endangering the security and integrity of the database.<br>
     *
     *                        <br>
     *                        It is highly recommended that the {@code aggregateType}'s value is only derived from a controlled and trusted source.<br>
     *                        To mitigate the risk of SQL injection attacks, external or untrusted inputs should never directly provide the {@code aggregateType}'s value.<br>
     *                        <b>Failure to adequately sanitize and validate this value could expose the application to SQL injection
     * @param aggregateIdType the Aggregate Id type used by the provided {@link AggregateType} - calls {@link AggregateIdSerializer#serializerFor(Class)}
     * @return the concrete {@link AggregateEventStreamConfiguration} for a given {@link AggregateType}
     */
    default CONFIG createEventStreamConfigurationFor(AggregateType aggregateType,
                                                     Class<?> aggregateIdType) {
        return createEventStreamConfigurationFor(aggregateType,
                                                 AggregateIdSerializer.serializerFor(aggregateIdType));
    }
}
